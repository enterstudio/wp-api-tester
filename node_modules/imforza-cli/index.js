#! /usr/bin/env node
/**
 * imFORZA command line utility built on Node.js
 * 
 * @package imforza-cli
 */

/**
 * Main 
 *
 * Lets go!
 *
 * First, let's load our node_modules.
 */
var program = require('commander'),
    request = require('request'),
    spawn_shell = require('spawn-shell'),
    colors = require('colors'),
    fs = require('fs'),
    unzip = require('unzipper'),
    asynchronous =  require('async'),
    mkdirp = require('mkdirp'),
    inquirer = require('inquirer'),
    shell = require('shelljs');

const path = require('path');

// Define global variables.
var environment = Object.assign({}, process.env, { PATH: process.env.PATH + ':/usr/local/bin' }),
    github_req  = { uri : "", headers : {'user-agent': 'node.js'}},
    command;

// Initialize shell program options.
program
  .version('0.0.1')
  .usage('<option> [action]')
  .option('-j, joke', 'want to hear a joke?', 1)
  .option('-p, plugin [action]', '[install|config|publish]', /^(install|config|publish)$/i, null)
  .option('-t, theme  [action]', '[install|config|publish]', /^(install|config|publish)$/i, null)
  .option('-G, gulp   [action]', '[install|config]', /^(install|config)$/i, null)
  .parse(process.argv);

// Making a list.. Checking it twice.
if( null === program.plugin && null === program.theme && null === program.gulp && 1 !== program.joke ){
  program.help();  
}
else{
  // Let the party begin.
  imforza_ascii();
}

// Tell me a funny joke.
if( program.joke ){  
  let uri = "http://api.icndb.com/jokes/random?firstName=Brandon&lastName=Hubbard&limitTo=[nerdy]";
  make_request( uri, function(error, body){
    if( null === error ){
      console.log( colors.green( body.value.joke ) );
    }
    else{
      console.log( colors.red( 'Jokes API not available.' ) );
    }
  });
}

// Set Program variables based on selected command.
if( program.gulp ){
   github_req.uri = "https://api.github.com/repos/wp-gulp/wp-gulp/releases/latest";
   command = 'Gulp';
}
else if (program.plugin) {
   github_req.uri = "https://api.github.com/repos/imforza/wordpress-plugin-template/releases/latest";
   command = 'Plugin';
}
else if (program.theme) {
   github_req.uri = "https://api.github.com/repos/imforza/wordpress-theme-template/releases/latest";
   command = 'Theme';
}

// Magic starts here.
switch ( program.gulp || program.plugin || program.theme ) {
  // Download & Install from GitHub releases.
  case 'install':{ 
    asynchronous.waterfall([
      function(callback){
        if( program.plugin || program.theme ){
          var dir = './new-' + command.toLowerCase();
          fs.mkdir(dir,function(){
            process.chdir(dir);
          });
        }
        console.log( 'Downloading ' + command + ' files from GitHub.' );
        console.log(github_req.uri);
        callback(null, github_req);
      },
      make_request,
      github_download_zip,
      function(callback){
        if( 'Gulp' === command ){
           return shell_exec( 'npm install', callback );
         }
         else{
           return which_config( callback );
         }
      }
    ], function (err, result) {
      if( null !== err ){
        console.log('ERROR: %j', err);
      }
      else{
        console.log(colors.green( command + ' Installed' ));
      }
    });    
    break;
  }
  // Run configs.
  case 'config':{
    which_config(function(){
      console.log( ('Success: ').green  + ( command + ' configured!' ) );
    });
    break;
  }
  // Idk yet.
  case 'publish':{  
    console.log( colors.yellow( 'Publish ' + command + ' coming soon' ) );
    break;
  }
}

/***********************************************************************************
 *                                Function definitions
 ***********************************************************************************/

/**
 * Make http request.
 * 
 * @param  {Object}   req      : Request to make.
 * @param  {Function} callback : Callback function
 * @return {Function}            : Callback function
 */
function make_request( req, callback ){
  // This function expects the request response to be formatted in json.
  request(req , function(error, response, body) {
    if( null === error ){
      body = JSON.parse(body);
      return callback(null, body );
    }
    else{
      console.log( colors.red( 'Unable to make request' ) );
      return callback(error);
    }
  });
}

/**
 * Download file from a zipfile on GitHub.
 * 
 * @param  {Object}   data     : Body from api request.
 * @param  {Function} callback : Callback function
 * @return void
 */
function github_download_zip( data, callback){
  try{
    r = request({ uri : data.assets[0].browser_download_url, headers : {'user-agent': 'node.js'}});
    r.on('response',  function (res) {
      // Unzip contents from request.
      res.pipe( unzip.Parse() ).on( 'entry', function(entry) {
        file_name = entry.path;
        type = entry.type; // 'Directory' or 'File' 
        match = file_name.match('^(.*?[\/])(.*)$') || [];
        
        if ( 'File' === type ) {
          write_file(match[2], entry);
        } else {
          entry.autodrain();
        }
      }).on('finish', function(data){
        callback(null);
      });
    });
  }
  catch(err){
    console.log(colors.red('Error Downloading from GitHub!'));
    return callback( err );
  }
}

/**
 * Writes file from stream.
 * 
 * @param  {String} file_path : Path of file to write.
 * @param  {Stream} entry     : File stream.
 * @return void
 */
function write_file(file_path, entry) {  
  // Create directories in file path.
  mkdirp(path.dirname( file_path), function (err) {
    if (err) {  
      entry.autodrain();
    }else{
      // Write file.
      console.log(colors.yellow( 'File: ' + file_path));
      entry.pipe(fs.createWriteStream(file_path));
    }  
  });
}

/**
 * Decides which configuration script to run and executes it.
 * 
 * @param  {Function} callback : Callback function
 * @return {Function}          : Callback function.
 */
function which_config( callback ){
  if( 'Gulp' === command ){
    gulp_config(callback);
  }else if( 'Theme'  === command || 'Plugin' === command ){
    wordpress_config(callback)
  }
  else{
    return callback(null);
  }
}

/**
 * Gulp configuration script.
 * 
 * @param  {Function} callback : Callback function.
 * @return {Function}          : Callback function.
 */
function gulp_config(callback){
  let prompt = inquirer.createPromptModule();
  let questions = [
    {
      type : 'input', 
      name : 'domain', 
      message : 'Local install domain: '
    },
    {
      type: 'list',
      name: 'type',
      message: 'Is this a theme or a plugin?',
      choices: ['theme', 'plugin']
    }
  ]; 
    
  prompt(questions).then(
    function(answers){
      console.log(colors.cyan( "Writing to gulpconf.js"));
      config = "var WEBSITE='" + answers.domain + "'; exports.WEBSITE=WEBSITE; var CONTENT_TYPE='" + answers.type + "'; exports.CONTENT_TYPE=CONTENT_TYPE"
      fs.writeFile("./gulpconf.js", config, function(err) {
        if(err) {
          console.log(err);
          return callback(err); 
        }
      callback(null);
    }); 
  });
}

/**
 * WordPress Theme & Plugin configuration script.
 * 
 * @param  {Function} callback : Callback function.
 * @return {Function}          : Callback function.
 */
function wordpress_config(callback){
  let prompt = inquirer.createPromptModule();
  let questions = [
    {
      type : 'input',
      name : 'name',
      message : command + ' Name: '
    },
    {
      type : 'input',
      name : 'uri',
      message : command + ' URI: '
    },
    {
      type : 'input',
      name : 'desc',
      message : command + ' Description: '
    },
    {
      type: 'input',
      name: 'textdomain',
      message: 'Enter ' + command + ' Textdomain: ',
      filter: function( answer ){
        //TODO: Add regex that removes spaces and adds hyphens.
        return answer.toLowerCase();
      }
    },
    {
      type: 'input',
      name: 'author',
      message: 'Enter ' + command + ' Author: '
    },
    {
      type: 'input',
      name: 'author_uri',
      message: 'Enter ' + command + ' Author URI: '
    },
    {
      type: 'input',
      name: 'contribs',
      message: 'Enter Contributors: '
    }
  ]; 
  
  console.log(colors.cyan("> Hit 'Enter' to leave blank or insert 'X' to skip." ));
  
  prompt(questions).then( function(answers){
    shell.ls('-R').forEach(function (file) {
      seds = [
        {regex: /(%%NAME%%)/, insert: answers.name },
        {regex: /%%URI%%/, insert: answers.uri },
        {regex: /%%DESCRIPTION%%/, insert: answers.desc },
        {regex: /(%%TEXTDOMAIN%%)/, insert: answers.textdomain },
        {regex: /%%AUTHOR%%/, insert: answers.author },
        {regex: /%%AUTHOR_URI%%/, insert: answers.author_uri },
        {regex: /%%CONTRIBUTORS%%/, insert: answers.contribs }
      ];
      find_replace(seds, file);
    });
    callback(null);
  });
}

/**
 * Perform a series of find and replaces on a file.
 * 
 * @param  {Array}  seds : Array of objects holding arguments for  
 * @param  {String} file : Path of file to search.
 */
function find_replace( seds, file){
  if( fs.lstatSync(file).isFile() ){ 
    seds.forEach(function(sed){
      // Skip if user enter 'X' as answer.
      if( 'x' !== sed.insert.toLowerCase() ){
        shell.sed('-i', sed.regex, sed.insert, file);
        shell.sed('-i', sed.regex, sed.insert, file);
      }
    });  
  }
}

/**
 * Execute Shell script within node.
 *
 * Not currently being used.
 * @param  {String}   command  : Command to execute.
 * @param  {Function} callback : Callback function.
 * @return {Function}          : Callback function.
 */
function shell_exec( command, callback ){
  // Execute bash script.
  // command = path.join( __dirname , '/scripts/gulpconf.sh');
  shell = spawn_shell(command, { shell: '/bin/bash', env: environment });
  shell.on('exit', function(data){
    return callback(null);
  });
}

/**
 * Print imFORZA ascii art.
 */
function imforza_ascii(){
  console.log( colors.yellow("--------------------------------------------------------------"));
  console.log( colors.green("    ██╗███╗   ███╗███████╗ ██████╗ ██████╗ ███████╗ █████╗     "));
  console.log( colors.green("    ██║████╗ ████║██╔════╝██╔═══██╗██╔══██╗╚══███╔╝██╔══██╗    "));
  console.log( colors.green("    ██║██╔████╔██║█████╗  ██║   ██║██████╔╝  ███╔╝ ███████║    "));
  console.log( colors.green("    ██║██║╚██╔╝██║██╔══╝  ██║   ██║██╔══██╗ ███╔╝  ██╔══██║    "));
  console.log( colors.green("    ██║██║ ╚═╝ ██║██║     ╚██████╔╝██║  ██║███████╗██║  ██║    "));
  console.log( colors.green("    ╚═╝╚═╝     ╚═╝╚═╝      ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    "));
  console.log( colors.yellow("               * The Internet Marketing Agency *              "));
  console.log( colors.yellow("--------------------------------------------------------------"));
}